// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MessageID)
pub enum MessageID {
    // @@protoc_insertion_point(enum_value:MessageID.GET_BEST_MOVE)
    GET_BEST_MOVE = 0,
    // @@protoc_insertion_point(enum_value:MessageID.MOVE_PIECE)
    MOVE_PIECE = 1,
    // @@protoc_insertion_point(enum_value:MessageID.GET_VALID_MOVES)
    GET_VALID_MOVES = 2,
    // @@protoc_insertion_point(enum_value:MessageID.FIND_BEST)
    FIND_BEST = 3,
    // @@protoc_insertion_point(enum_value:MessageID.VALID_MOVES_RESPONSE)
    VALID_MOVES_RESPONSE = 4,
    // @@protoc_insertion_point(enum_value:MessageID.FIND_BEST_RESPONSE)
    FIND_BEST_RESPONSE = 5,
}

impl ::protobuf::Enum for MessageID {
    const NAME: &'static str = "MessageID";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageID> {
        match value {
            0 => ::std::option::Option::Some(MessageID::GET_BEST_MOVE),
            1 => ::std::option::Option::Some(MessageID::MOVE_PIECE),
            2 => ::std::option::Option::Some(MessageID::GET_VALID_MOVES),
            3 => ::std::option::Option::Some(MessageID::FIND_BEST),
            4 => ::std::option::Option::Some(MessageID::VALID_MOVES_RESPONSE),
            5 => ::std::option::Option::Some(MessageID::FIND_BEST_RESPONSE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MessageID> {
        match str {
            "GET_BEST_MOVE" => ::std::option::Option::Some(MessageID::GET_BEST_MOVE),
            "MOVE_PIECE" => ::std::option::Option::Some(MessageID::MOVE_PIECE),
            "GET_VALID_MOVES" => ::std::option::Option::Some(MessageID::GET_VALID_MOVES),
            "FIND_BEST" => ::std::option::Option::Some(MessageID::FIND_BEST),
            "VALID_MOVES_RESPONSE" => ::std::option::Option::Some(MessageID::VALID_MOVES_RESPONSE),
            "FIND_BEST_RESPONSE" => ::std::option::Option::Some(MessageID::FIND_BEST_RESPONSE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MessageID] = &[
        MessageID::GET_BEST_MOVE,
        MessageID::MOVE_PIECE,
        MessageID::GET_VALID_MOVES,
        MessageID::FIND_BEST,
        MessageID::VALID_MOVES_RESPONSE,
        MessageID::FIND_BEST_RESPONSE,
    ];
}

impl ::protobuf::EnumFull for MessageID {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MessageID").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MessageID {
    fn default() -> Self {
        MessageID::GET_BEST_MOVE
    }
}

impl MessageID {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageID>("MessageID")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto*\x84\x01\n\tMessageID\x12\x11\n\rGET_BEST_MOVE\x10\0\
    \x12\x0e\n\nMOVE_PIECE\x10\x01\x12\x13\n\x0fGET_VALID_MOVES\x10\x02\x12\
    \r\n\tFIND_BEST\x10\x03\x12\x18\n\x14VALID_MOVES_RESPONSE\x10\x04\x12\
    \x16\n\x12FIND_BEST_RESPONSE\x10\x05B\x13\n\tprotocolsB\x06CommonJ\xca\
    \x02\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\x01\x12\x03\x02\0\"\n\x08\n\x01\
    \x08\x12\x03\x03\0'\n\t\n\x02\x08\x08\x12\x03\x03\0'\n\n\n\x02\x05\0\x12\
    \x04\x05\0\x0e\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0e\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x06\x04\x16\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\
    \x04\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x14\x15\n\x0b\n\x04\x05\
    \0\x02\x01\x12\x03\x07\x04\x13\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\
    \x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x11\x12\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\x08\x04\x18\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    \x08\x04\x13\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\x16\x17\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03\n\x04\x12\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03\n\x04\r\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x04\x12\x03\x0c\x04\x1d\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\
    \x0c\x04\x18\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0c\x1b\x1c\n\x0b\n\
    \x04\x05\0\x02\x05\x12\x03\r\x04\x1b\n\x0c\n\x05\x05\0\x02\x05\x01\x12\
    \x03\r\x04\x16\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\r\x19\x1ab\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MessageID::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
