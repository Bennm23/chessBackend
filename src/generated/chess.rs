// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `chess.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Position)
pub struct Position {
    // message fields
    // @@protoc_insertion_point(field:Position.row)
    pub row: i32,
    // @@protoc_insertion_point(field:Position.col)
    pub col: i32,
    // special fields
    // @@protoc_insertion_point(special_field:Position.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row",
            |m: &Position| { &m.row },
            |m: &mut Position| { &mut m.row },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "col",
            |m: &Position| { &m.col },
            |m: &mut Position| { &mut m.col },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Position>(
            "Position",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Position {
    const NAME: &'static str = "Position";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.row = is.read_int32()?;
                },
                16 => {
                    self.col = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.row != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.row);
        }
        if self.col != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.col);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.row != 0 {
            os.write_int32(1, self.row)?;
        }
        if self.col != 0 {
            os.write_int32(2, self.col)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Position {
        Position::new()
    }

    fn clear(&mut self) {
        self.row = 0;
        self.col = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Position {
        static instance: Position = Position {
            row: 0,
            col: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Position {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Position").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ProtoPiece)
pub struct ProtoPiece {
    // message fields
    // @@protoc_insertion_point(field:ProtoPiece.type)
    pub type_: ::protobuf::EnumOrUnknown<PieceType>,
    // @@protoc_insertion_point(field:ProtoPiece.color)
    pub color: ::protobuf::EnumOrUnknown<PieceColor>,
    // @@protoc_insertion_point(field:ProtoPiece.row)
    pub row: i32,
    // @@protoc_insertion_point(field:ProtoPiece.col)
    pub col: i32,
    // special fields
    // @@protoc_insertion_point(special_field:ProtoPiece.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProtoPiece {
    fn default() -> &'a ProtoPiece {
        <ProtoPiece as ::protobuf::Message>::default_instance()
    }
}

impl ProtoPiece {
    pub fn new() -> ProtoPiece {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ProtoPiece| { &m.type_ },
            |m: &mut ProtoPiece| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "color",
            |m: &ProtoPiece| { &m.color },
            |m: &mut ProtoPiece| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "row",
            |m: &ProtoPiece| { &m.row },
            |m: &mut ProtoPiece| { &mut m.row },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "col",
            |m: &ProtoPiece| { &m.col },
            |m: &mut ProtoPiece| { &mut m.col },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProtoPiece>(
            "ProtoPiece",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProtoPiece {
    const NAME: &'static str = "ProtoPiece";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.color = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.row = is.read_int32()?;
                },
                32 => {
                    self.col = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(PieceType::NONE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.color != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            my_size += ::protobuf::rt::int32_size(2, self.color.value());
        }
        if self.row != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.row);
        }
        if self.col != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.col);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(PieceType::NONE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.color != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.color))?;
        }
        if self.row != 0 {
            os.write_int32(3, self.row)?;
        }
        if self.col != 0 {
            os.write_int32(4, self.col)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProtoPiece {
        ProtoPiece::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(PieceType::NONE);
        self.color = ::protobuf::EnumOrUnknown::new(PieceColor::BLACK);
        self.row = 0;
        self.col = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProtoPiece {
        static instance: ProtoPiece = ProtoPiece {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            color: ::protobuf::EnumOrUnknown::from_i32(0),
            row: 0,
            col: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProtoPiece {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProtoPiece").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProtoPiece {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtoPiece {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Board)
pub struct Board {
    // message fields
    // @@protoc_insertion_point(field:Board.pieces)
    pub pieces: ::std::vec::Vec<ProtoPiece>,
    // @@protoc_insertion_point(field:Board.player_to_move)
    pub player_to_move: ::protobuf::EnumOrUnknown<PieceColor>,
    // @@protoc_insertion_point(field:Board.turnCount)
    pub turnCount: i32,
    // @@protoc_insertion_point(field:Board.valid_moves)
    pub valid_moves: ::std::vec::Vec<Move>,
    // special fields
    // @@protoc_insertion_point(special_field:Board.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Board {
    fn default() -> &'a Board {
        <Board as ::protobuf::Message>::default_instance()
    }
}

impl Board {
    pub fn new() -> Board {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pieces",
            |m: &Board| { &m.pieces },
            |m: &mut Board| { &mut m.pieces },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player_to_move",
            |m: &Board| { &m.player_to_move },
            |m: &mut Board| { &mut m.player_to_move },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "turnCount",
            |m: &Board| { &m.turnCount },
            |m: &mut Board| { &mut m.turnCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "valid_moves",
            |m: &Board| { &m.valid_moves },
            |m: &mut Board| { &mut m.valid_moves },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Board>(
            "Board",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Board {
    const NAME: &'static str = "Board";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pieces.push(is.read_message()?);
                },
                16 => {
                    self.player_to_move = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.turnCount = is.read_int32()?;
                },
                34 => {
                    self.valid_moves.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pieces {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.player_to_move != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            my_size += ::protobuf::rt::int32_size(2, self.player_to_move.value());
        }
        if self.turnCount != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.turnCount);
        }
        for value in &self.valid_moves {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pieces {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.player_to_move != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.player_to_move))?;
        }
        if self.turnCount != 0 {
            os.write_int32(3, self.turnCount)?;
        }
        for v in &self.valid_moves {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Board {
        Board::new()
    }

    fn clear(&mut self) {
        self.pieces.clear();
        self.player_to_move = ::protobuf::EnumOrUnknown::new(PieceColor::BLACK);
        self.turnCount = 0;
        self.valid_moves.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Board {
        static instance: Board = Board {
            pieces: ::std::vec::Vec::new(),
            player_to_move: ::protobuf::EnumOrUnknown::from_i32(0),
            turnCount: 0,
            valid_moves: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Board {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Board").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Board {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Board {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetValidMoves)
pub struct GetValidMoves {
    // message fields
    // @@protoc_insertion_point(field:GetValidMoves.board)
    pub board: ::protobuf::MessageField<Board>,
    // @@protoc_insertion_point(field:GetValidMoves.piece_to_move)
    pub piece_to_move: ::protobuf::MessageField<ProtoPiece>,
    // special fields
    // @@protoc_insertion_point(special_field:GetValidMoves.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetValidMoves {
    fn default() -> &'a GetValidMoves {
        <GetValidMoves as ::protobuf::Message>::default_instance()
    }
}

impl GetValidMoves {
    pub fn new() -> GetValidMoves {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Board>(
            "board",
            |m: &GetValidMoves| { &m.board },
            |m: &mut GetValidMoves| { &mut m.board },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProtoPiece>(
            "piece_to_move",
            |m: &GetValidMoves| { &m.piece_to_move },
            |m: &mut GetValidMoves| { &mut m.piece_to_move },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetValidMoves>(
            "GetValidMoves",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetValidMoves {
    const NAME: &'static str = "GetValidMoves";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.board)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.piece_to_move)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.board.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.piece_to_move.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.board.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.piece_to_move.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetValidMoves {
        GetValidMoves::new()
    }

    fn clear(&mut self) {
        self.board.clear();
        self.piece_to_move.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetValidMoves {
        static instance: GetValidMoves = GetValidMoves {
            board: ::protobuf::MessageField::none(),
            piece_to_move: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetValidMoves {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetValidMoves").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetValidMoves {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetValidMoves {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ValidMovesResponse)
pub struct ValidMovesResponse {
    // message fields
    // @@protoc_insertion_point(field:ValidMovesResponse.moves)
    pub moves: ::std::vec::Vec<Position>,
    // special fields
    // @@protoc_insertion_point(special_field:ValidMovesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidMovesResponse {
    fn default() -> &'a ValidMovesResponse {
        <ValidMovesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ValidMovesResponse {
    pub fn new() -> ValidMovesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "moves",
            |m: &ValidMovesResponse| { &m.moves },
            |m: &mut ValidMovesResponse| { &mut m.moves },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidMovesResponse>(
            "ValidMovesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidMovesResponse {
    const NAME: &'static str = "ValidMovesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.moves.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.moves {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.moves {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidMovesResponse {
        ValidMovesResponse::new()
    }

    fn clear(&mut self) {
        self.moves.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidMovesResponse {
        static instance: ValidMovesResponse = ValidMovesResponse {
            moves: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidMovesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidMovesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidMovesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidMovesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetBestMove)
pub struct GetBestMove {
    // message fields
    // @@protoc_insertion_point(field:GetBestMove.board)
    pub board: ::protobuf::MessageField<Board>,
    // @@protoc_insertion_point(field:GetBestMove.player)
    pub player: ::protobuf::EnumOrUnknown<PieceColor>,
    // special fields
    // @@protoc_insertion_point(special_field:GetBestMove.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBestMove {
    fn default() -> &'a GetBestMove {
        <GetBestMove as ::protobuf::Message>::default_instance()
    }
}

impl GetBestMove {
    pub fn new() -> GetBestMove {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Board>(
            "board",
            |m: &GetBestMove| { &m.board },
            |m: &mut GetBestMove| { &mut m.board },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "player",
            |m: &GetBestMove| { &m.player },
            |m: &mut GetBestMove| { &mut m.player },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBestMove>(
            "GetBestMove",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBestMove {
    const NAME: &'static str = "GetBestMove";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.board)?;
                },
                16 => {
                    self.player = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.board.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.player != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            my_size += ::protobuf::rt::int32_size(2, self.player.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.board.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.player != ::protobuf::EnumOrUnknown::new(PieceColor::BLACK) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.player))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBestMove {
        GetBestMove::new()
    }

    fn clear(&mut self) {
        self.board.clear();
        self.player = ::protobuf::EnumOrUnknown::new(PieceColor::BLACK);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBestMove {
        static instance: GetBestMove = GetBestMove {
            board: ::protobuf::MessageField::none(),
            player: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBestMove {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBestMove").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBestMove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBestMove {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Move)
pub struct Move {
    // message fields
    // @@protoc_insertion_point(field:Move.piece_to_move)
    pub piece_to_move: ::protobuf::MessageField<ProtoPiece>,
    // @@protoc_insertion_point(field:Move.end_position)
    pub end_position: ::protobuf::MessageField<Position>,
    // special fields
    // @@protoc_insertion_point(special_field:Move.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Move {
    fn default() -> &'a Move {
        <Move as ::protobuf::Message>::default_instance()
    }
}

impl Move {
    pub fn new() -> Move {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ProtoPiece>(
            "piece_to_move",
            |m: &Move| { &m.piece_to_move },
            |m: &mut Move| { &mut m.piece_to_move },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Position>(
            "end_position",
            |m: &Move| { &m.end_position },
            |m: &mut Move| { &mut m.end_position },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Move>(
            "Move",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Move {
    const NAME: &'static str = "Move";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.piece_to_move)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.end_position)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.piece_to_move.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.end_position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.piece_to_move.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.end_position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Move {
        Move::new()
    }

    fn clear(&mut self) {
        self.piece_to_move.clear();
        self.end_position.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Move {
        static instance: Move = Move {
            piece_to_move: ::protobuf::MessageField::none(),
            end_position: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Move {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Move").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Move {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Move {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BestMoveResponse)
pub struct BestMoveResponse {
    // message fields
    // @@protoc_insertion_point(field:BestMoveResponse.best_move)
    pub best_move: ::protobuf::MessageField<Move>,
    // special fields
    // @@protoc_insertion_point(special_field:BestMoveResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BestMoveResponse {
    fn default() -> &'a BestMoveResponse {
        <BestMoveResponse as ::protobuf::Message>::default_instance()
    }
}

impl BestMoveResponse {
    pub fn new() -> BestMoveResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Move>(
            "best_move",
            |m: &BestMoveResponse| { &m.best_move },
            |m: &mut BestMoveResponse| { &mut m.best_move },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BestMoveResponse>(
            "BestMoveResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BestMoveResponse {
    const NAME: &'static str = "BestMoveResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.best_move)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.best_move.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.best_move.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BestMoveResponse {
        BestMoveResponse::new()
    }

    fn clear(&mut self) {
        self.best_move.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BestMoveResponse {
        static instance: BestMoveResponse = BestMoveResponse {
            best_move: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BestMoveResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BestMoveResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BestMoveResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BestMoveResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PieceColor)
pub enum PieceColor {
    // @@protoc_insertion_point(enum_value:PieceColor.BLACK)
    BLACK = 0,
    // @@protoc_insertion_point(enum_value:PieceColor.WHITE)
    WHITE = 1,
}

impl ::protobuf::Enum for PieceColor {
    const NAME: &'static str = "PieceColor";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PieceColor> {
        match value {
            0 => ::std::option::Option::Some(PieceColor::BLACK),
            1 => ::std::option::Option::Some(PieceColor::WHITE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PieceColor] = &[
        PieceColor::BLACK,
        PieceColor::WHITE,
    ];
}

impl ::protobuf::EnumFull for PieceColor {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PieceColor").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PieceColor {
    fn default() -> Self {
        PieceColor::BLACK
    }
}

impl PieceColor {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PieceColor>("PieceColor")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PieceType)
pub enum PieceType {
    // @@protoc_insertion_point(enum_value:PieceType.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:PieceType.PAWN)
    PAWN = 1,
    // @@protoc_insertion_point(enum_value:PieceType.KNIGHT)
    KNIGHT = 2,
    // @@protoc_insertion_point(enum_value:PieceType.BISHOP)
    BISHOP = 3,
    // @@protoc_insertion_point(enum_value:PieceType.ROOK)
    ROOK = 5,
    // @@protoc_insertion_point(enum_value:PieceType.QUEEN)
    QUEEN = 10,
    // @@protoc_insertion_point(enum_value:PieceType.KING)
    KING = 100,
}

impl ::protobuf::Enum for PieceType {
    const NAME: &'static str = "PieceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PieceType> {
        match value {
            0 => ::std::option::Option::Some(PieceType::NONE),
            1 => ::std::option::Option::Some(PieceType::PAWN),
            2 => ::std::option::Option::Some(PieceType::KNIGHT),
            3 => ::std::option::Option::Some(PieceType::BISHOP),
            5 => ::std::option::Option::Some(PieceType::ROOK),
            10 => ::std::option::Option::Some(PieceType::QUEEN),
            100 => ::std::option::Option::Some(PieceType::KING),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PieceType] = &[
        PieceType::NONE,
        PieceType::PAWN,
        PieceType::KNIGHT,
        PieceType::BISHOP,
        PieceType::ROOK,
        PieceType::QUEEN,
        PieceType::KING,
    ];
}

impl ::protobuf::EnumFull for PieceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PieceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            PieceType::NONE => 0,
            PieceType::PAWN => 1,
            PieceType::KNIGHT => 2,
            PieceType::BISHOP => 3,
            PieceType::ROOK => 4,
            PieceType::QUEEN => 5,
            PieceType::KING => 6,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PieceType {
    fn default() -> Self {
        PieceType::NONE
    }
}

impl PieceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PieceType>("PieceType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bchess.proto\".\n\x08Position\x12\x10\n\x03row\x18\x01\x20\x01(\x05\
    R\x03row\x12\x10\n\x03col\x18\x02\x20\x01(\x05R\x03col\"s\n\nProtoPiece\
    \x12\x1e\n\x04type\x18\x01\x20\x01(\x0e2\n.PieceTypeR\x04type\x12!\n\x05\
    color\x18\x02\x20\x01(\x0e2\x0b.PieceColorR\x05color\x12\x10\n\x03row\
    \x18\x03\x20\x01(\x05R\x03row\x12\x10\n\x03col\x18\x04\x20\x01(\x05R\x03\
    col\"\xa5\x01\n\x05Board\x12#\n\x06pieces\x18\x01\x20\x03(\x0b2\x0b.Prot\
    oPieceR\x06pieces\x121\n\x0eplayer_to_move\x18\x02\x20\x01(\x0e2\x0b.Pie\
    ceColorR\x0cplayerToMove\x12\x1c\n\tturnCount\x18\x03\x20\x01(\x05R\ttur\
    nCount\x12&\n\x0bvalid_moves\x18\x04\x20\x03(\x0b2\x05.MoveR\nvalidMoves\
    \"^\n\rGetValidMoves\x12\x1c\n\x05board\x18\x01\x20\x01(\x0b2\x06.BoardR\
    \x05board\x12/\n\rpiece_to_move\x18\x02\x20\x01(\x0b2\x0b.ProtoPieceR\
    \x0bpieceToMove\"5\n\x12ValidMovesResponse\x12\x1f\n\x05moves\x18\x01\
    \x20\x03(\x0b2\t.PositionR\x05moves\"P\n\x0bGetBestMove\x12\x1c\n\x05boa\
    rd\x18\x01\x20\x01(\x0b2\x06.BoardR\x05board\x12#\n\x06player\x18\x02\
    \x20\x01(\x0e2\x0b.PieceColorR\x06player\"e\n\x04Move\x12/\n\rpiece_to_m\
    ove\x18\x01\x20\x01(\x0b2\x0b.ProtoPieceR\x0bpieceToMove\x12,\n\x0cend_p\
    osition\x18\x02\x20\x01(\x0b2\t.PositionR\x0bendPosition\"6\n\x10BestMov\
    eResponse\x12\"\n\tbest_move\x18\x01\x20\x01(\x0b2\x05.MoveR\x08bestMove\
    *\"\n\nPieceColor\x12\t\n\x05BLACK\x10\0\x12\t\n\x05WHITE\x10\x01*V\n\tP\
    ieceType\x12\x08\n\x04NONE\x10\0\x12\x08\n\x04PAWN\x10\x01\x12\n\n\x06KN\
    IGHT\x10\x02\x12\n\n\x06BISHOP\x10\x03\x12\x08\n\x04ROOK\x10\x05\x12\t\n\
    \x05QUEEN\x10\n\x12\x08\n\x04KING\x10dB\x12\n\tprotocolsB\x05ChessJ\xa5\
    \r\n\x06\x12\x04\0\0:\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x08\x12\x03\x02\0\"\n\t\n\x02\x08\x01\x12\x03\x02\0\"\n\x08\n\x01\x08\
    \x12\x03\x03\0&\n\t\n\x02\x08\x08\x12\x03\x03\0&\n\n\n\x02\x05\0\x12\x04\
    \x05\0\x08\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0f\n\x0b\n\x04\x05\0\
    \x02\0\x12\x03\x06\x04\x0e\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x04\t\
    \n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x0c\r\n\x0b\n\x04\x05\0\x02\x01\
    \x12\x03\x07\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\x04\t\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x0c\r\n\n\n\x02\x04\0\x12\x04\n\
    \0\r\x01\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x10\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0b\x04\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x04\t\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0b\n\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0b\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x04\x12\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0c\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0c\n\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x10\x11\n\n\n\
    \x02\x05\x01\x12\x04\x0f\0\x17\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0f\x05\
    \x0e\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x10\x04\r\n\x0c\n\x05\x05\x01\x02\
    \0\x01\x12\x03\x10\x04\x08\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x10\x0b\
    \x0c\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x11\x04\r\n\x0c\n\x05\x05\x01\
    \x02\x01\x01\x12\x03\x11\x04\x08\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\
    \x11\x0b\x0c\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x12\x04\x0f\n\x0c\n\x05\
    \x05\x01\x02\x02\x01\x12\x03\x12\x04\n\n\x0c\n\x05\x05\x01\x02\x02\x02\
    \x12\x03\x12\r\x0e\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x13\x04\x0f\n\x0c\
    \n\x05\x05\x01\x02\x03\x01\x12\x03\x13\x04\n\n\x0c\n\x05\x05\x01\x02\x03\
    \x02\x12\x03\x13\r\x0e\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x14\x04\r\n\
    \x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x14\x04\x08\n\x0c\n\x05\x05\x01\
    \x02\x04\x02\x12\x03\x14\x0b\x0c\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x15\
    \x04\x0f\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x15\x04\t\n\x0c\n\x05\
    \x05\x01\x02\x05\x02\x12\x03\x15\x0c\x0e\n\x0b\n\x04\x05\x01\x02\x06\x12\
    \x03\x16\x04\x0f\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x16\x04\x08\n\
    \x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x16\x0b\x0e\n\n\n\x02\x04\x01\x12\
    \x04\x19\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x12\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x1a\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\
    \x1a\x04\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a\x0e\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x1a\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x1b\x04\x19\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x1b\x04\x0e\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1b\x0f\x14\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x1b\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1c\
    \x04\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1c\x04\t\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x1c\n\r\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x1c\x10\x11\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1d\x04\x12\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x1d\n\r\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1d\x10\x11\
    \n\n\n\x02\x04\x02\x12\x04\x20\0%\x01\n\n\n\x03\x04\x02\x01\x12\x03\x20\
    \x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x04#\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03!\r\x17\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03!\x18\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03!!\"\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\"\x04\"\n\x0c\n\x05\x04\
    \x02\x02\x01\x06\x12\x03\"\x04\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\"\x0f\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\"\x20!\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03#\x04\x18\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03#\x04\t\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03#\n\x13\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03#\x16\x17\n\x0b\n\x04\x04\x02\x02\x03\
    \x12\x03$\x04\"\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03$\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\x03\x06\x12\x03$\r\x11\n\x0c\n\x05\x04\x02\x02\x03\x01\
    \x12\x03$\x12\x1d\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03$\x20!\n\n\n\
    \x02\x04\x03\x12\x04'\0*\x01\n\n\n\x03\x04\x03\x01\x12\x03'\x08\x15\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03(\x04\x14\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03(\x04\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\n\x0f\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03(\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03)\
    \x04!\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03)\x04\x0e\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03)\x0f\x1c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03)\x1f\x20\n\n\n\x02\x04\x04\x12\x04+\0-\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03+\x08\x1a\n\x0b\n\x04\x04\x04\x02\0\x12\x03,\x04\x20\n\x0c\n\x05\
    \x04\x04\x02\0\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03,\r\x15\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03,\x16\x1b\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03,\x1e\x1f\n\n\n\x02\x04\x05\x12\x04/\02\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03/\x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x030\
    \x04\x14\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x030\x04\t\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x030\n\x0f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x030\x12\
    \x13\n\x0b\n\x04\x04\x05\x02\x01\x12\x031\x04\x1a\n\x0c\n\x05\x04\x05\
    \x02\x01\x06\x12\x031\x04\x0e\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x031\
    \x0f\x15\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x031\x18\x19\n\n\n\x02\x04\
    \x06\x12\x044\07\x01\n\n\n\x03\x04\x06\x01\x12\x034\x08\x0c\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x035\x04!\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x035\x04\
    \x0e\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x035\x0f\x1c\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x035\x1f\x20\n\x0b\n\x04\x04\x06\x02\x01\x12\x036\x04\x1e\
    \n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x036\x04\x0c\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x036\r\x19\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x036\x1c\
    \x1d\n\n\n\x02\x04\x07\x12\x048\0:\x01\n\n\n\x03\x04\x07\x01\x12\x038\
    \x08\x18\n\x0b\n\x04\x04\x07\x02\0\x12\x039\x04\x17\n\x0c\n\x05\x04\x07\
    \x02\0\x06\x12\x039\x04\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x039\t\x12\
    \n\x0c\n\x05\x04\x07\x02\0\x03\x12\x039\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Position::generated_message_descriptor_data());
            messages.push(ProtoPiece::generated_message_descriptor_data());
            messages.push(Board::generated_message_descriptor_data());
            messages.push(GetValidMoves::generated_message_descriptor_data());
            messages.push(ValidMovesResponse::generated_message_descriptor_data());
            messages.push(GetBestMove::generated_message_descriptor_data());
            messages.push(Move::generated_message_descriptor_data());
            messages.push(BestMoveResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(PieceColor::generated_enum_descriptor_data());
            enums.push(PieceType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
